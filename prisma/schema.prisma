// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Excel {
  id  Int @id @default(autoincrement())

  excel_size  Float?
  excel_name  String?
  type        ExcelType
  
  from   Int
  to     Int

  last   Int @default(0)
  total  Int @default(0)

  createdAt  DateTime @default(now())
}

model ExcelResult {
  id  Int @id @default(autoincrement())

  excel_id Int
  row      Int  

  name     String?
  phone    String?
  num      String?

  address   String?
  reference String?
  local     String?


  equal_to Int?
  equal ExcelResult? @relation("Equal", fields: [equal_to], references: [id])
  equalResults ExcelResult[] @relation("Equal")
  
  colony String?
	city String?
	state String?
	code String?

  rowData  Json
  posibleData Json?

  status  ResultStatus @default(OK)


  resultDate  DateTime @default(now())
}

enum ExcelType {
  TIPE_1
  TIPE_2
}

enum ResultStatus {
  OK
  EQUAL
  ERROR
  SKIP
  PENDING
}


model States {

  id Int @id @default(autoincrement())

  state String @unique

  address Address[]

  last_update  DateTime   @default(now())
}

model Address {

  id Int @id @default(autoincrement())

  d_code  String

  d_asenta String
  d_tipo_asenta String

  d_muni  String
  d_esta  String
  d_ciud  String

  id_state Int
  state   States  @relation(fields: [id_state], references: [id], onDelete: Cascade)

}
